// RotatedTriangle_Matrix4.js (c) 2012 matsuda
// Vertex shader program
var VSHADER_SOURCE =
  'attribute vec4 a_Position;\n' +
  'attribute vec4 a_Colour;\n' +
  'varying   vec4 v_Colour;\n' +
  'void main() {\n' +
  '  gl_Position = a_Position;\n' +
  '  v_Colour = a_Colour;\n' +
  '}\n';

// Fragment shader program
var FSHADER_SOURCE =
  'precision mediump float;\n' +
  'varying   vec4 v_Colour;\n' +
  'void main() {\n' +
  '  gl_FragColor = v_Colour;\n' +
  '}\n';

var RED 		= {r:1.0, g:0.0, b:0.0};
var GREEN 		= {r:0.0, g:1.0, b:0.0};
var BLUE 		= {r:0.0, g:0.0, b:1.0};
var BLACK 		= {r:0.0, g:0.0, b:0.0};
var CADMIUM		= {r:1.0, g:0.6, b:0.07};

var firstCords = {x:null, y:null};
var lastCords = {x:null, y:null};
var mouseDown = false;
var isCohen = true;
var hasMoved = false;
var tempArray = [];
var clipSquare = [];
var dragArray = [];
var tempDragArray = [];
var n;

var x1;
var x2;
var y1;
var y2;

var xmin = -0.75;
var xmax = 0.75;
var ymin = -0.75;
var ymax = 0.75;

function getMousePos(canvas, ev) {
    var rect = canvas.getBoundingClientRect()
    var newClickCords = {x:0.0, y:0.0};
    newClickCords.x = (ev.clientX - rect.left) / canvas.height * 2 - 1;
    newClickCords.y = (ev.clientY - rect.top) / canvas.width * -2 + 1;
    return newClickCords;
}

function main() {
	// Retrieve <canvas> element
	var canvas = document.getElementById('webgl');

	canvas.onmousedown = function(ev){
		firstCords = getMousePos(canvas, ev);
		console.log(firstCords.x + ' ' + firstCords.y);
		mouseDown = true;
		hasMoved = false;
	};

	document.onmousemove = function(ev){
		if(mouseDown){
			hasMoved = true;
			lastCords = getMousePos(canvas, ev);
			console.log(lastCords.x + ' ' + lastCords.y);
			tempDragArray = clipSquare;
			n = initDragDraw(gl);
			draw(gl);
		}
	};

	document.onmouseup = function(ev){
		if(hasMoved){
			mouseDown = false;
			hasMoved = false;
			tempArray = clipSquare;
			initClipAlgo(gl);
		}
	};

	document.onkeydown = function(ev) {
		ev = ev || window.ev;
		if(ev.keyCode == 32){
			swap();
		}
		else if(ev.keyCode == 82){
			reset(gl);
		}
	};


	// Get the rendering context for WebGL
	var gl = getWebGLContext(canvas);
	if (!gl) {
		console.log('Failed to get the rendering context for WebGL');
		return;
	}

	// Initialize shaders
	if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
		console.log('Failed to intialize shaders.');
		return;
	}

	// Write the positions of vertices to a vertex shader
	var n = initVertexBuffers(gl);
	if (n < 0) {
		console.log('Failed to set the positions of the vertices');
		return;
	}

	// Specify the color for clearing <canvas>
	gl.clearColor(0.49, 0.99, 0.0, 1);

	draw(gl);
}

function initDragDraw(gl){

	dragArray = [
		xmin, ymax,			0.0, 0.0, 1.0,
		xmin, ymin,			0.0, 0.0, 1.0,
		xmax, ymin,			0.0, 0.0, 1.0,
		xmax, ymax,			0.0, 0.0, 1.0
	];

	if(tempDragArray.length > 0){
		for(var i = 0; i < tempDragArray.length; i++){
			dragArray[i] = tempDragArray;
		}
	}

	if (firstCords.x != null && firstCords.y != null && lastCords.x != null && lastCords.y != null){
		addPoint(dragArray, firstCords.x, firstCords.y, GREEN);
		addPoint(dragArray, lastCords.x, lastCords.y, GREEN);
	}

	var vertices = new Float32Array(dragArray);
	n = clipSquare.length / 5;

	// Create a buffer object
	var vertexBuffer = gl.createBuffer();
	if (!vertexBuffer) {
		console.log('Failed to create the buffer object');
		return false;
	}

	var FSIZE = dragArray.BYTES_PER_ELEMENT;

	// Bind the buffer object to target
	gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
	// Write date into the buffer object
	gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

	var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
	if (a_Position < 0) {
		console.log('Failed to get the storage location of a_Position');
		return -1;
	}
	// Assign the buffer object to a_Position variable
	gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 5 * FSIZE, 0);

	// Enable the assignment to a_Position variable
	gl.enableVertexAttribArray(a_Position);

	var a_Colour = gl.getAttribLocation(gl.program, 'a_Colour');
	if (a_Position < 0) {
		console.log('Failed to get the storage location of a_Colour');
		return -1;
	}
	// Assign the buffer object to a_Position variable
	gl.vertexAttribPointer(a_Colour, 3, gl.FLOAT, false, 5 * FSIZE, 2 * FSIZE);

	// Enable the assignment to a_Position variable
	gl.enableVertexAttribArray(a_Colour);

	return n;
}

function initVertexBuffers(gl) {

	clipSquare = [
		xmin, ymax,			0.0, 0.0, 1.0,
		xmin, ymin,			0.0, 0.0, 1.0,
		xmax, ymin,			0.0, 0.0, 1.0,
		xmax, ymax,			0.0, 0.0, 1.0
	];

	if(tempArray.length > 0){
		for(var i = 0; i < tempArray.length; i++){
			clipSquare[i] = tempArray[i];
		}
	}

	var vertices = new Float32Array(clipSquare);
	n = clipSquare.length / 5;

	// Create a buffer object
	var vertexBuffer = gl.createBuffer();
	if (!vertexBuffer) {
		console.log('Failed to create the buffer object');
		return false;
	}

	var FSIZE = vertices.BYTES_PER_ELEMENT;

	// Bind the buffer object to target
	gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
	// Write date into the buffer object
	gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

	var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
	if (a_Position < 0) {
		console.log('Failed to get the storage location of a_Position');
		return -1;
	}
	// Assign the buffer object to a_Position variable
	gl.vertexAttribPointer(a_Position, 2, gl.FLOAT, false, 5 * FSIZE, 0);

	// Enable the assignment to a_Position variable
	gl.enableVertexAttribArray(a_Position);

	var a_Colour = gl.getAttribLocation(gl.program, 'a_Colour');
	if (a_Position < 0) {
		console.log('Failed to get the storage location of a_Colour');
		return -1;
	}
	// Assign the buffer object to a_Position variable
	gl.vertexAttribPointer(a_Colour, 3, gl.FLOAT, false, 5 * FSIZE, 2 * FSIZE);

	// Enable the assignment to a_Position variable
	gl.enableVertexAttribArray(a_Colour);

	return n;
}

function initClipAlgo(gl){
	x1 = firstCords.x;
	y1 = firstCords.y;
	x2 = lastCords.x;
	y2 = lastCords.y;


	if(isCohen){
		num = cohenCalc();
	}
	else{
		num = liangCalc();
	}
	addPoint(tempArray, firstCords.x, firstCords.y, RED);
	addPoint(tempArray, lastCords.x, lastCords.y, RED);

}

function cohenCalc(){
	return 0;
}

function liangCalc(){
	return 0;
}

function reset(gl){
	firstCords = {x:null, y:null};
	lastCords = {x:null, y:null};
	mouseDown = false;
	isCohen = true;
	hasMoved = false;
	tempArray = [];
	clipSquare = [];
	dragArray = [];
	tempDragArray = [];
	n = initVertexBuffers(gl);
	draw(gl);

	x1 = null;
	x2 = null;
	y1 = null;
	y2 = null;
	document.getElementById('algorithm').textContent = "Cohen-Sutherland is being used";
}

function swap(){
	isCohen = !isCohen;
	if(isCohen){
		document.getElementById('algorithm').textContent = "Cohen-Sutherland is being used";
	}
	else{
		document.getElementById('algorithm').textContent = "Liang-Barsky is being used";
	}
}

function draw(gl){

	// Clear <canvas>
	gl.clear(gl.COLOR_BUFFER_BIT);

	gl.drawArrays(gl.LINE_LOOP, 0, 4);
	gl.drawArrays(gl.LINES, 4, n-4
);
}

function addPoint(array, x, y, Colour){
	array.push(x);
	array.push(y);
	array.push(Colour.r);
	array.push(Colour.g);
	array.push(Colour.b);
}
